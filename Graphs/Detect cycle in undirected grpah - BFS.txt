class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool hascycle(int s, int V, vector<bool> &vis, vector<int> adj[])
    {
        queue<pair<int,int>> q;
        vis[s] = true;
        q.push({s,-1});
        while(!q.empty())
        {
            int node = q.front().first;
            int par = q.front().second;
            q.pop();
            for(auto it: adj[node])
            {
                if(!vis[it])
                {
                    vis[it] = true;
                    q.push({it,node});
                }
                else if(par!=it)
                    return true;
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<bool> vis(V+1, false);
        for(int i = 0; i<V; i++)
        {
            if(!vis[i])
            {
                if(hascycle(i,V,vis,adj))
                    return true;
            }
        }
        return false;
    }
};