/* Given two strings s and t. Return the minimum number of operations required to convert s to t.
The possible operations are permitted:

Insert a character at any position of the string.
Remove any character from the string.
Replace any character from the string with any other character.
 

Example 1:

Input: 
s = "geek", t = "gesek"
Output: 1
Explanation: One operation is required 
inserting 's' between two 'e's of str1. */


class Solution {
  public:
    int editDistance(string s, string t) {
        // Code here
        if(s==t) return 0;
        int dp[s.size()+1][t.size()+1];
        for(int i = 0; i<=s.size(); i++) dp[i][0] = i;
        for(int i = 0; i<=t.size(); i++) dp[0][i] = i;
        
        for(int i = 1; i<=s.size(); i++)
        {
            for(int j = 1; j<=t.size(); j++)
            {
                if(s[i-1]!=t[j-1])
                    dp[i][j] = 1+ min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1]));
                else dp[i][j] = dp[i-1][j-1];
            }
        }
        return dp[s.size()][t.size()];
        
    }
};