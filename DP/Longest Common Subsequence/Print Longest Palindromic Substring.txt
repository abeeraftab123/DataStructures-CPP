class Solution{   
public:
    string longestPalindrome(string A){
        // code here 
        string B = A;
        reverse(B.begin(), B.end());
        int n = A.length();
        int dp[n+1][n+1];
        for(int i = 0; i<n+1; i++)
            for(int j = 0; j<n+1; j++)
            {
                if(i==0||j==0) dp[i][j]=0;
            }
        for(int i = 1; i<n+1; i++)
            for(int j = 1; j<n+1; j++)
            {
                if(A[i-1]==B[j-1]) dp[i][j] = dp[i-1][j-1] + 1;
                else dp[i][j] = 0;
            }
        int ans = INT_MIN;
        for(int i = 0; i<n+1; i++)
            for(int j = 0; j<n+1; j++)
                ans = max(ans,dp[i][j]);
                
        int st = 0, en = ans-1;
        while(en<n)
        {
            B="";
            for(int i = st; i<=en; i++)
                B+=A[i];
            string C = B;
            reverse(B.begin(),B.end());
            if(C==B)
                return B;
            st++;
            en++;
        }
        char c = A[0];
        B="";
        return B+c;
        
    }
};